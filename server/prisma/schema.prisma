generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                  @id @default(autoincrement())
  phoneNumber  String               @unique
  profile      Profile?
  conversations ConversationUser[]
  matches      Match[]              @relation("MatchUser")
  matchedBy    Match[]              @relation("MatchedUser")
  messages     Message[]            @relation("SenderRelation")
  isVerified   Boolean
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model Profile {
  id          Int       @id @default(autoincrement())
  name        String
  age         Int
  about       String?
  location    String?
  interests   String[]
  profileImage String?
  images      String[]
  gender      String
  dateOfBirth DateTime
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Conversation {
  id        Int       @id @default(autoincrement())
  users     ConversationUser[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ConversationUser {
  id             Int          @id @default(autoincrement())
  conversationId Int
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("SenderRelation", fields: [senderId], references: [id])
  createdAt      DateTime     @default(now())
}

model Match {
  id            Int       @id @default(autoincrement())
  userId        Int
  matchedUserId Int
  isStarred     Boolean   @default(false)
  user          User      @relation("MatchUser", fields: [userId], references: [id])
  matchedUser   User      @relation("MatchedUser", fields: [matchedUserId], references: [id])
  createdAt     DateTime  @default(now())
}

model Verification {
  id           Int       @id @default(autoincrement())
  phoneNumber  String    @unique
  code         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
